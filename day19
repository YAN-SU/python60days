#注释
小括号的另一种用途是通过语法(?#comment)来包含注释。
例如: 2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)。
要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式 时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。
启用这个选 项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。

#没有看懂！！
#平衡组/递归匹配
这里介绍的平衡组语法是由.Net Framework 支持的;其它语言/库不一定支持 这种功能，或者支持此功能但需要使用不同的语法。
这里需要用到以下的语法构造:
 (?'group') 把捕获的内容命名为 group,并压入堆栈(Stack)
 (?'-group') 从堆栈上弹出最后压入堆栈的名为 group 的捕获内容，如果堆栈本来为空，
则本分组的匹配失败
 (?(group)yes|no) 如果堆栈上存在以名为 group 的捕获内容的话，继续匹配 yes 部分
的表达式，否则继续匹配 no 部分
 (?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败
如果你不是一个程序员(或者你自称程序员但是不知道堆栈是什么东西)，你就 这样理解上面的三种语法吧:
  第一个就 是在黑板上写一个"group"，
  第二个就是 从黑板上擦掉一个"group"，
  第三个就是看黑板上写的还有没有"group"，如果有 就继续匹配 yes 部 分，否则就匹配 no 部分。
我们需要做的是每碰到了左括号，就在压入一个"Open",每碰到一个右括号，就 弹出一个，
到了最后就看看堆栈是否为空--如果不为空那就证明左括号比右括 号多，那匹配就应该失败。
正则表达式引擎会进行回溯(放弃最前面或最后面的 一些字符)，尽量使整个表达式得到匹配。
